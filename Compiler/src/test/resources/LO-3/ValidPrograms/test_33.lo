// good test case
// DFA implementing "(?:not )? valid"
// main method return value:  956
// Author: Tyler Collins (Summer 2022)

class DeterministicFiniteAutomaton(int state;) {
    void DeterministicFiniteAutomaton() {
        {
            state = 0;
        }
    }

    bool accepted() {
        {
            return (state = 9);
        }
    }

    int read(String char) {
        {
            if ((state = 0)) {
                if ((char = "n")) {
                    state = 1;
                } else {
                    if ((char = "v")) {
                        state = 5;
                    } else {
                        state = 10;
                    }
                }

                return state;
            } else { ; }

            if ((state = 1)) {
                if ((char = "o")) {
                    state = (state + 1);
                } else {
                    state = 10;
                }

                return state;
            } else { ; }

            if ((state = 2)) {
                if ((char = "t")) {
                    state = (state + 1);
                } else {
                    state = 10;
                }

                return state;
            } else { ; }

            if ((state = 3)) {
                if ((char = " ")) {
                    state = (state + 1);
                } else {
                    state = 10;
                }

                return state;
            } else { ; }

            if ((state = 4)) {
                if ((char = "v")) {
                    state = (state + 1);
                } else {
                    state = 10;
                }

                return state;
            } else { ; }

            if ((state = 5)) {
                if ((char = "a")) {
                    state = (state + 1);
                } else {
                    state = 10;
                }

                return state;
            } else { ; }

            if ((state = 6)) {
                if ((char = "l")) {
                    state = (state + 1);
                } else {
                    state = 10;
                }

                return state;
            } else { ; }

            if ((state = 7)) {
                if ((char = "i")) {
                    state = (state + 1);
                } else {
                    state = 10;
                }

                return state;
            } else { ; }

            if ((state = 8)) {
                if ((char = "d")) {
                    state = (state + 1);
                } else {
                    state = 10;
                }

                return state;
            } else { ; }

            if ((state = 9)) {
                if ((char = "")) {
                    state = (state);
                } else {
                    state = 10;
                }

                return state;
            } else { ; }

            return state;
        }
    }
}

class Main() {
    int main() {
        int state;
        DeterministicFiniteAutomaton dfa;
        {
            dfa = new DeterministicFiniteAutomaton();

            if ((dfa.accepted() & (((1 / 0) > 1) ? true : false))) {
                return (~1);
            } else {
                state = dfa.read("v");
                state = dfa.read("a");
                state = dfa.read("l");
                state = dfa.read("i");
                state = dfa.read("d");
            }

            if ((dfa.accepted() | (((1 / 0) > 1) ? true : false))) {
                return 956;
            } else {
                return 375;
            }

            return (~2);
        }
    }
}