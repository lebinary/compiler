// str_rev
// Input: Memory Address
// Output: Memory Address
// Description: Allocates a new string and copies the string at the input memory address into the new
//              string in reverse order.  Places the address of the new string on the stack.

// get length of string
PUSHIMM 0 // return value
PUSHOFF 0
JSR get_str_len
ADDSP -1

// Duplicate string length for indexing character later
DUP

// allocating space for new string
PUSHIMM 1 // Add extra byte for "end of string char"
ADD
MALLOC

// Prepare counter for looping
PUSHIMM 0

// Start adding character in reverse order
start_loop:
    // End loop of counter equals string length
    PUSHOFF 3
    PUSHOFF 1
    EQUAL
    JUMPC stop_loop

    // Retrieve curr char in original string
    PUSHOFF 1
    PUSHOFF 3
    SUB
    PUSHIMM 1
    SUB
    PUSHOFF 0
    ADD
    PUSHIND

    // Store in new (reversed) string
    PUSHOFF 2
    PUSHOFF 3
    ADD
    SWAP
    STOREIND

    // Increment counter
    PUSHOFF 3
    PUSHIMM 1
    ADD
    STOREOFF 3

    JUMP start_loop

stop_loop:
    // add end of string char to new string
    PUSHOFF 2
    PUSHOFF 3
    ADD
    PUSHIMMCH '\0'
    STOREIND

    ADDSP -1 // remove counter off stack
    JUMP clean_up


// Get string length subroutine
get_str_len:
    LINK

    PUSHOFF -2

    start_count:
        DUP // duplicate address
        PUSHIND

        // end loop if nil
        ISNIL
        JUMPC stop_count

        // increase address
        PUSHIMM 1
        ADD

        JUMP start_count

    stop_count:
        PUSHOFF -2
        SUB
        STOREOFF -3

        UNLINK
        RST


clean_up:
    SWAP
    ADDSP -1
    SWAP
    FREE
