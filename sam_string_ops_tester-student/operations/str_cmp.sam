// str_cmp
// Input: Memory Address, Memory Address
// Output: Integer
// Description: Compares the two input values. If the first input value is bigger than the second input value, a 1 is placed on the stack.
//              If they are equal, a 0 is placed on the stack. If the first input value is smaller than the second input value, a -1 is placed on the stack.

start_program:
    PUSHIMM 0 // return value
    JSR str_cmp
    JUMP clean_up

str_cmp:
    LINK

    PUSHOFF -4 // param 1
    PUSHOFF -3 // param 2
    PUSHIMM 0 // result
    PUSHIMM 0 // counter

    start_loop:
        JUMP is_both_nil

        compare_char:
            // get current character of string 1
            PUSHOFF 1
            PUSHOFF 4 // counter
            ADD
            PUSHIND

            // get current character of string 2
            PUSHOFF 2
            PUSHOFF 4 // counter
            ADD
            PUSHIND

            // Compare 2 characters
            CMP
            STOREOFF 3 // save result

            // If result != 0, stop loop
            PUSHOFF 3
            JUMPC stop_loop

            // increase counter and continue next iteration
            PUSHIMM 1
            ADD
            JUMP start_loop

    stop_loop:
        // return result
        PUSHOFF 3
        STOREOFF -2

        ADDSP -4
        UNLINK
        RST

    is_both_nil:
        // is current char in string 1 nil?
        PUSHOFF 1
        PUSHOFF 4 // counter
        ADD
        PUSHIND
        ISNIL

        // Duplicate to check for both nil later
        DUP

        // is current char in string 2 nil?
        PUSHOFF 2
        PUSHOFF 4 // counter
        ADD
        PUSHIND
        ISNIL

        EQUAL
        AND

        JUMPC stop_loop
        JUMP compare_char

clean_up:
    SWAP
    FREE // free param 2
    SWAP
    FREE // free param 1
