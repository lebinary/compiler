// str_concat
// Input: Memory Address, Memory Address
// Output: Memory Address
// Description: Allocates a new string and concatenates the input strings into the new string.  Places the
//              memory address of the new string on the stack.

PUSHIMM "aaa"
PUSHIMM "bbb"

// get length of first string
PUSHIMM 0 // return value
PUSHOFF 0
JSR get_str_len
ADDSP -1

// get length of second string
PUSHIMM 0 // return value
PUSHOFF 1
JSR get_str_len
ADDSP -1

// allocating space for concat string
ADD
PUSHIMM 1 // Add extra byte for "end of string char"
ADD
MALLOC

DUP // Duplicate final address to increment on

// Append first string to memory
PUSHOFF 0
JSR append_str_to_memory
ADDSP -1

// Append second string to memory
PUSHOFF 1
JSR append_str_to_memory
ADDSP -1

JUMP post_processing

// Get string length subroutine
get_str_len:
    LINK

    PUSHOFF -2

    start_count:
        DUP // duplicate address
        PUSHIND

        // end loop if nil
        ISNIL
        JUMPC stop_count

        // increase address
        PUSHIMM 1
        ADD

        JUMP start_count

    stop_count:
        PUSHOFF -2
        SUB
        STOREOFF -3

        UNLINK
        RST


// Append str to memory subroutine
append_str_to_memory:
    LINK

    PUSHOFF -2

    start_loop:
        DUP // duplicate address
        PUSHIND

        // end loop if nil
        ISNIL
        JUMPC stop_loop

        // Save to allocated memory
        DUP
        PUSHIND
        PUSHOFF -3
        SWAP
        STOREIND

        // increase address current string
        PUSHIMM 1
        ADD

        // increase final address string
        PUSHOFF -3
        PUSHIMM 1
        ADD
        STOREOFF -3

        JUMP start_loop

    stop_loop:
        ADDSP -1
        UNLINK
        RST


post_processing:
    // Add end of string
    PUSHIMMCH '\0'
    STOREIND

    // Clean up
    SWAP
    FREE
    SWAP
    FREE
